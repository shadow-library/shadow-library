{
  "$id": "urn:shadow-library:database:collection",
  "$schema": "https://json-schema.org/draft-07/schema",
  "title": "MongoDB collection schema",
  "type": "object",
  "required": ["name", "schema"],
  "additionalProperties": false,
  "definitions": {
    "name": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9_]{3,32}$"
    },
    "datatype": {
      "type": "string",
      "enum": ["uniqueId", "string", "int", "long", "double", "boolean", "date", "object", "array", "objectId"]
    },
    "field": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": { "$ref": "#/definitions/datatype" },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "required": {
          "anyOf": [{ "type": "boolean" }, { "type": "string", "description": "Function to determine if this field is required" }]
        },
        "format": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "validator": {
          "type": "string",
          "description": "validator function to apply to the field"
        },
        "transformer": {
          "type": "string",
          "description": "transformer function to apply to the field"
        },
        "defaultFn": {
          "type": "string",
          "description": "Default function to apply to the field"
        },
        "immutable": {
          "type": "boolean",
          "description": "Whether the field is immutable. By default fields are mutable"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": { "const": "boolean" }
            }
          },
          "then": {
            "properties": {
              "default": {
                "type": "boolean",
                "description": "Default value for the field"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "string" }
            }
          },
          "then": {
            "properties": {
              "default": {
                "type": "string",
                "description": "Default value for the field"
              },
              "transform": {
                "type": "string",
                "description": "Transform function to apply to the field",
                "enum": ["lowercase", "uppercase", "capitalize"]
              },
              "trim": {
                "type": "boolean",
                "description": "Whether to trim the field value",
                "default": false
              },
              "enum": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of allowed values for the field"
                  },
                  {
                    "type": "object",
                    "description": "Enum values for the field",
                    "patternProperties": {
                      "^[a-zA-Z0-9_]{3,32}$": { "type": "string" }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "anyOf": [{ "const": "int" }, { "const": "long" }, { "const": "double" }]
              }
            }
          },
          "then": {
            "properties": {
              "default": {
                "type": "number",
                "description": "Default value for the field"
              },
              "minimum": {
                "type": "integer",
                "description": "Minimum value for the field"
              },
              "maximum": {
                "type": "integer",
                "description": "Maximum value for the field"
              },
              "enum": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": { "type": "number" },
                    "description": "List of allowed values for the field"
                  },
                  {
                    "type": "object",
                    "description": "Enum values for the field",
                    "patternProperties": {
                      "^[a-zA-Z0-9_]{3,32}$": { "type": "number" }
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "date" }
            }
          },
          "then": {
            "properties": {
              "default": {
                "type": "string",
                "pattern": "^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z|now([+-][0-9]+[smhdwMy])?)$",
                "description": "Default value for the field, can be a date-time string or relative time from current time"
              },
              "minimum": {
                "type": "string",
                "format": "date-time",
                "description": "Minimum value for the field"
              },
              "maximum": {
                "type": "string",
                "format": "date-time",
                "description": "Maximum value for the field"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "anyOf": [{ "const": "object" }, { "const": "array" }]
              }
            }
          },
          "then": {
            "required": ["subType"],
            "properties": {
              "subType": {
                "oneOf": [{ "type": "string" }, { "$ref": "#/definitions/document" }],
                "description": "Sub-type of the object or array"
              }
            }
          }
        }
      ]
    },
    "document": {
      "type": "object",
      "description": "Fields in the document",
      "minProperties": 1,
      "properties": {
        "$discriminator": {
          "type": "object",
          "required": ["key", "values"],
          "properties": {
            "key": {
              "type": "string",
              "description": "Field to use as the discriminator key"
            },
            "values": {
              "type": "object",
              "description": "The possible values for the discriminator key mapped to the schema",
              "patternProperties": {
                "^[a-zA-Z0-9_]{3,32}$": { "$ref": "#/definitions/document" }
              }
            }
          }
        }
      },
      "patternProperties": {
        "^(?!_id$)[a-zA-Z0-9_]{3,32}$": {
          "$ref": "#/definitions/field"
        }
      }
    },
    "index": {
      "type": "object",
      "required": ["keys"],
      "additionalProperties": false,
      "properties": {
        "name": {
          "$ref": "#/definitions/name",
          "description": "Name of the index"
        },
        "keys": {
          "type": "object",
          "description": "Fields in the index",
          "minProperties": 1,
          "patternProperties": {
            "^[a-zA-Z0-9_]{3,32}$": {
              "type": "number",
              "enum": [-1, 1]
            }
          }
        },
        "unique": {
          "type": "boolean",
          "description": "Whether the index is unique"
        },
        "expireAfterSeconds": {
          "type": "number",
          "description": "Seconds to expire documents in the collection"
        }
      }
    },
    "relation": {
      "type": "object",
      "required": ["collection", "localField", "foreignField"],
      "additionalProperties": false,
      "properties": {
        "collection": {
          "$ref": "#/definitions/name",
          "description": "Name of the collection to relate to"
        },
        "localField": {
          "$ref": "#/definitions/name",
          "description": "Field in the current collection to relate to"
        },
        "foreignField": {
          "$ref": "#/definitions/name",
          "description": "Field in the reference collection to relate to"
        }
      }
    },
    "projection": {
      "type": "object",
      "minProperties": 1,
      "patternProperties": {
        "^[a-zA-Z0-9_]{3,32}$": {
          "oneOf": [{ "type": "boolean" }, { "$ref": "#/definitions/projection" }]
        }
      }
    }
  },
  "properties": {
    "$schema": {
      "type": "string",
      "description": "URI of the schema for the collection"
    },
    "name": {
      "$ref": "#/definitions/name",
      "description": "Name of the collection in the database (e.g. 'users', 'accounts', 'UserComments')"
    },
    "collectionName": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9-_]{3,32}$",
      "description": "Name of the collection in the API (e.g. 'users', 'accounts', 'user-comments'). If not provided, the 'name' field is used."
    },
    "description": {
      "type": "string",
      "description": "Description of the collection",
      "minLength": 1,
      "maxLength": 255
    },
    "schema": {
      "type": "object",
      "description": "Document schema for the collection",
      "minProperties": 2,
      "allOf": [
        {
          "properties": {
            "_id": {
              "type": "object",
              "required": ["type"],
              "properties": {
                "type": { "type": "string", "enum": ["uniqueId", "objectId"] },
                "alias": { "type": "string", "pattern": "^[a-zA-Z]{2,32}$", "description": "Alias for the '_id' field in the collection" }
              }
            }
          }
        },
        { "$ref": "#/definitions/document" }
      ]
    },
    "subDocuments": {
      "type": "array",
      "description": "Definitions for the sub-documents in the collection",
      "items": {
        "type": "object",
        "required": ["name", "schema"],
        "additionalProperties": false,
        "properties": {
          "name": { "$ref": "#/definitions/name" },
          "description": {
            "type": "string",
            "description": "Description of the sub-document",
            "minLength": 1,
            "maxLength": 255
          },
          "schema": { "$ref": "#/definitions/document" }
        }
      }
    },
    "indexes": {
      "type": "array",
      "items": { "$ref": "#/definitions/index" }
    },
    "relations": {
      "type": "array",
      "items": { "$ref": "#/definitions/relation" }
    },
    "projections": {
      "type": "array",
      "description": "Custom pre-defined projections for the collection",
      "items": {
        "type": "object",
        "required": ["name", "project"],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the projection"
          },
          "project": { "$ref": "#/definitions/projection" }
        }
      }
    }
  }
}
